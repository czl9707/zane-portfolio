---
import { displayRole, type RoleType } from '@/lib/utils/constants'
import { MonthAsString } from '@/lib/utils/date'
import type { HTMLAttributeAnchorTarget } from 'react'

import CardBase from "@/components/ui/Card.astro"
import Chip from '@/components/ui/Chip.astro'
import ChipContainer from '@/components/ui/Chip.Container.astro'
import Typography from '@/components/ui/Typography.astro'
import Spacer from '@/components/ui/Spacer.astro'
import MarkdownBlock from '@/components/ui/markdown/Block.astro'

interface Props {
    data: {
        title: string,
        tags?: string[]
        role?: RoleType
        date?: Date,
        description?: string
    }
    href: string,
    target?: HTMLAttributeAnchorTarget,
    occupiedColumns?: number,
    occupiedRows?: number,
}
const { data, href, target, occupiedColumns = 1, occupiedRows = 1 } = Astro.props;
data.tags ??= [];
---
<CardBase class:list={["ContentCard"]}
    occupiedRows={occupiedRows} occupiedColumns={occupiedColumns} 
    href={href} target={target}>

    <div class:list={["ContentCardTitle"]}>
        <Typography variant='h6'>{data.title}</Typography>
        {
            data.date != undefined &&
            <Typography variant='body1'>{MonthAsString(data.date)}</Typography>
        }
    </div>

    <ChipContainer class:list={["ContentCardTags"]}>
        {
            data.role != undefined &&
            <Chip color="nebular">
                <Typography variant='body2'>by a {displayRole(data.role)}</Typography>
            </Chip>
        }
        {data.tags.map(t => <Chip>
            <Typography variant='body2'>{t}</Typography>
        </Chip>)}
    </ChipContainer>

    {
        data.description != undefined && <>
            <Spacer spacing="paragraph" />
            <div class:list={["ContentCardDescription"]}>
                <MarkdownBlock content={data.description}>
                    {data.description}
                </MarkdownBlock>
            </div>
        </>
    }
</CardBase>

<style>
    .ContentCard {
        .ContentCardTitle {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: var(--spacing-component);

            > :nth-child(1) {
                overflow: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
            }
            > :nth-child(2) {
                white-space: nowrap;
                text-align: end;
                opacity: 0.75;
            }
        }

        .ContentCardDescription {
            opacity: 0.75;
            p {
                overflow: hidden;
                display: -webkit-box;
                -webkit-line-clamp: 3; 
                line-clamp: 2;
                -webkit-box-orient: vertical;
                text-overflow: ellipsis;
            }
        }

        .ContentCardTags {
            width: 100%;
            pointer-events: none;
            padding-top: 0.5rem;
        }
    }
</style>
